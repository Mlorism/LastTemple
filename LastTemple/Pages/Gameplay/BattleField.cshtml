@page
@model LastTemple.Pages.Gameplay.BattlefieldModel
@{
}

<div>
   
        <div class="row">
            <div id="logDiv" style="background:#505050; border-top:20px; border-color:white; overflow: auto; height:400px;" class="col-10">
                <ul>
                    @foreach (var log in Model.BattleLog)
                    {
                        <li>@log</li>
                    }
                </ul>
            </div>

            <div id="enemies" class="col-2">
                @foreach (var item in Model.Enemies)
                {
                    <div class="form-group">
                        <div class="btn-group btn-group-toggle" data-toggle="buttons">                            
                            <label class="btn btn-outline-warning" id="btnChose-@item.Id" onclick="choseEnemy()">
                                <input type="radio" value="@item.Id" name="SelectedEnemy" form="battleForm" onchange="checkSpell()" data-alive="@item.Alive"/> @item.Name
                            </label>
                        </div>

                        <br />
                        <span>Życie @item.HitPoints / @item.MaxHP - @Converters.CreatureStatusConverter.Status(item)</span> <br />
                        <span>Mana @item.Mana / @item.MaxMana</span> <br />
                        <span>Punkty Akcji @item.ActionPoints / @item.MaxAP</span>
                    </div>
                }
            </div>

        </div>
        <div class="row">
            <div class="col-10 offset-1 text-center">
                <div id="hero" data-AC="@Model.Hero.ActionPoints" data-Mana="@Model.Hero.Mana"></div> @*information about hero for js*@         
                <p><h3>@Model.Hero.Name</h3></p>
                <p>Zdrowie: @Model.Hero.HitPoints/@Model.Hero.MaxHP Mana: @Model.Hero.Mana/@Model.Hero.MaxMana Punkty Akcji: @Model.Hero.ActionPoints/@Model.Hero.MaxAP</p>
                <form id="battleForm" method="post">
                    <button class="btn btn-outline-info" id="fastAttackBtn" asp-page-handler="Attack" asp-route-attackerId="@Model.Hero.Id" asp-route-attackType="1" type="submit" disabled>Zwykły</button>
                    <button class="btn btn-outline-info" id="normalAttackBtn" asp-page-handler="Attack" asp-route-attackerId="@Model.Hero.Id" asp-route-attackType="0" type="submit" disabled>Szybki</button>
                    <button class="btn btn-outline-info" id="strongAttackBtn" asp-page-handler="Attack" asp-route-attackerId="@Model.Hero.Id" asp-route-attackType="2" type="submit" disabled>Silny</button>
                    <button class="btn btn-outline-info" id="itemBtn" asp-page-handler="UseItem" asp-route-userId="@Model.Hero.Id" disabled>Przedmiot</button>
                    <button class="btn btn-outline-info" id="spellBtn" asp-page-handler="CastSpell" asp-route-userId="@Model.Hero.Id" disabled>Zaklęcie</button>

                    <br /> <br />
                    <select id="selectItem" class="form-control bg-secondary text-light col-3" style="display:inline-block" asp-for="@Model.SelectedItem">
                        <option value="-1">Przedmiot</option>
                        @foreach (var item in Model.Hero.Items)
                        {
                            <option data-AC="@item.Item.ActionCost" value="@item.ItemId"> @item.Item.Name (@item.Qty) - @item.Item.ActionCost PA</option>
                        }
                    </select>
                    <select id="selectSpell" class="form-control bg-secondary text-light col-3" style="display:inline-block" asp-for="@Model.SelectedSpell">
                        <option value="-1">Zaklęcie</option>
                        @foreach (var item in Model.Hero.MagicBook)
                        {
                            <option data-AC="@item.ActionCost" data-ManaCost="@item.ManaCost" data-spellType="@item.Type" value="@item.Id"> @item.Name - @item.ManaCost PM - @item.ActionCost PA</option>
                        }
                    </select>
                    <br /><br />
                    <button class="btn btn-outline-danger" type="submit" asp-page-handler="EndTurn">Koniec tury</button>
                </form>
            </div>
        </div>
    
</div>

<script type="text/javascript">   

    var enemySelected = false;
    var selectItem = document.getElementById("selectItem");
    var selectSpell = document.getElementById("selectSpell");
    var hero = document.getElementById("hero");
    var APs = hero.dataset.ac * 1; 

    scrollLog(); 
    aliveStatus();

    $("input:radio").change(function () {
        
        $("#fastAttackBtn").attr("disabled", false);
        $("#normalAttackBtn").attr("disabled", false);
        $("#strongAttackBtn").attr("disabled", false);
    });

    selectItem.oninput = function () { checkItem(); }
    selectSpell.oninput = function () { checkSpell(); }
  

    function aliveStatus() {
        var enemies = document.getElementsByName("SelectedEnemy");
        
        for (i = 0; i < enemies.length; i++) {            

            if (enemies[i].dataset.alive == 'False') {                
                $(enemies[i]).attr("disabled", true); 
            }
        }

    }

    function enemySelection()
    {
        var enemies = document.getElementsByName("SelectedEnemy");       
        for (i = 0; i < enemies.length; i++) {

            if (enemies[i].checked) {              
                enemySelected = true;
                break;
            }
        }
    }

    function checkItem() {
        var APcost = selectItem.options[selectItem.selectedIndex].dataset.ac;        

        if ($(selectItem).val() == -1 || APcost>APs)
            $("#itemBtn").attr("disabled", true);       
        else 
            $("#itemBtn").attr("disabled", false);
    }

    function checkSpell() {
        var APcost = selectSpell.options[selectSpell.selectedIndex].dataset.ac;
        var heroMana = hero.dataset.mana * 1;
        var manaCost = selectSpell.options[selectSpell.selectedIndex].dataset.manacost;
        var spellType = selectSpell.options[selectSpell.selectedIndex].dataset.spelltype;
        
        if ($(selectSpell).val() != -1)
        {           
            if (APs >= APcost && heroMana >= manaCost)
            {
                if (spellType == 'Offensive') {
                    enemySelection();
                    if (enemySelected == true) {
                        $("#spellBtn").attr("disabled", false);
                    }
                    else {
                        $("#spellBtn").attr("disabled", true);
                    }
                }
                else if (spellType == 'Healing') {
                    $("#spellBtn").attr("disabled", false);
                }
            }

            else
                $("#spellBtn").attr("disabled", true);
        }

        else
            $("#spellBtn").attr("disabled", true);            
    }   

    function scrollLog() {
        var logDiv = document.getElementById("logDiv");
        logDiv.scrollTop = logDiv.scrollHeight;
    }
    
    function choseEnemy() {

        window.requestAnimationFrame(function (timestamp) {

            var enemies = document.getElementsByName("SelectedEnemy");
            for (i = 0; i < enemies.length; i++) {
                if (enemies[i].checked) {
                    if (!enemies[i].parentElement.classList.contains("active")) {

                        enemies[i].parentElement.classList.add("active");
                    }
                }

                else {
                    if (enemies[i].parentElement.classList.contains("active")) {

                        enemies[i].parentElement.classList.remove("active");
                    }
                }
            }
        })
    } // choseEnemy()
   
</script>